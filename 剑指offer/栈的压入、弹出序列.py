'''
题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
'''

'''
假设入栈顺序为1,2,3,4,5 出栈顺序为4,5,3,2,1
那么首先准备一个辅助栈，把1,2,3,4,5分别压入栈，压入的同时喝出栈序列的第一个数进行比较
1.首先1入栈，1！=4，压入2	辅助栈=[1]	出栈序列=[4,5,3,2,1]
2.2！=4，压入3	辅助栈=[1,2]	出栈序列=[4,5,3,2,1]
3.3！=4，压入4	辅助栈=[1,2,3]	出栈序列=[4,5,3,2,1]
4.4 ==4，辅助栈=[1,2,3]	出栈序列=[5,3,2,1]
5.5 ==5，辅助栈=[1,2,3]	出栈序列=[3,2,1]
6.3 ==3，辅助栈=[1,2]	出栈序列=[2,1]
7.2 ==2，辅助栈=[1]	出栈序列=[1]
8.1 ==1，辅助栈=[]	出栈序列=[]
辅助栈为空，那么可能是该压栈序列的弹出序列 return True
'''


# -*- coding:utf-8 -*-
class Solution:
    def IsPopOrder(self, pushV, popV):
        # write code here
        if not pushV or not popV:
            return False
        stack = []
        for i in pushV:
            stack.append(i)
            while len(stack) and stack[-1] == popV[0]:
                stack.pop()
                popV.pop(0)
        if len(stack):
            return False
        return True